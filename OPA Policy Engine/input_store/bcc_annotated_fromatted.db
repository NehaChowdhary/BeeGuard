{
  "_default": {
    "1": {
      "capabilities": [],
      "helperCallParams": {},
      "startLine": 2,
      "endLine": 6,
      "File": "/home/palani/github/ebpf-projects-annotations/examples/bcc/trace_fields.c",
      "funcName": "hello",
      "signature": 1571495,
      "developer_inline_comments": [
        {
          "start_line": 1,
          "end_line": 1,
          "text": "//int hello (void *ctx)"
        }
      ],
      "updateMaps": [],
      "readMaps": [],
      "input": [
        "NA"
      ],
      "output": "int",
      "helper": [
        "bpf_trace_printk"
      ],
      "compatibleHookpoints": [
        "socket_filter",
        "sched_cls",
        "cgroup_sock",
        "cgroup_sock_addr",
        "lwt_out",
        "sk_skb",
        "perf_event",
        "lwt_in",
        "sched_act",
        "xdp",
        "lwt_xmit",
        "sock_ops",
        "tracepoint",
        "cgroup_sysctl",
        "kprobe",
        "sk_msg",
        "cgroup_skb",
        "raw_tracepoint_writable",
        "cgroup_device",
        "lwt_seg6local",
        "flow_dissector",
        "raw_tracepoint",
        "sk_reuseport"
      ],
      "source": [
        "int hello ()\n",
        "{\n",
        "    bpf_trace_printk (\"Hello, World!\\\\n\");\n",
        "    return 0;\n",
        "}\n"
      ],
      "called_function_list": [],
      "call_depth": 0,
      "humanFuncDescription": [
        {},
        {
          "description": "This prints out a trace line every time the clone system call is called.\n                      This will instrument the kernel sys_clone() function, which will then run the BPF defined hello() function each time it is called.",
          "author": "Utkalika Satapathy",
          "authorEmail": "utkalika.satapathy01@gmail.com",
          "date": "02.02.2023"
        }
      ],
      "AI_func_description": [
        {
          "description": "",
          "author": "",
          "authorEmail": "",
          "date": "",
          "invocationParameters": ""
        }
      ],
      "is_root_fn": 1
    },
    "3": {
      "capabilities": [
        {
          "capability": "read_sys_info",
          "read_sys_info": [
            {
              "Project": "bcc",
              "FunctionName": "bpf_ktime_get_ns",
              "Return Type": "u64",
              "Description": "u64 bpf_ktime_get_ns(void) Return: u64 number of nanoseconds. Starts at system boot time but stops during suspend. Examples in situ: \"https://github.com/iovisor/bcc/search?q=bpf_ktime_get_ns+path%3Aexamples&type=Code search /examples , \"https://github.com/iovisor/bcc/search?q=bpf_ktime_get_ns+path%3Atools&type=Code search /tools ",
              "Return": "u64 number of nanoseconds",
              "Input Prameters": [],
              "compatible_hookpoints": [
                "socket_filter",
                "kprobe",
                "sched_cls",
                "sched_act",
                "tracepoint",
                "xdp",
                "perf_event",
                "cgroup_skb",
                "cgroup_sock",
                "lwt_in",
                "lwt_out",
                "lwt_xmit",
                "sock_ops",
                "sk_skb",
                "sk_msg",
                "raw_tracepoint",
                "cgroup_sock_addr",
                "lwt_seg6local",
                "sk_reuseport",
                "flow_dissector",
                "raw_tracepoint_writable"
              ],
              "capabilities": [
                "read_sys_info"
              ]
            }
          ]
        }
      ],
      "helperCallParams": {},
      "startLine": 8,
      "endLine": 29,
      "File": "/home/palani/github/ebpf-projects-annotations/examples/bcc/biolatpcts.c",
      "funcName": "RAW_TRACEPOINT_PROBE",
      "signature": 69712581,
      "developer_inline_comments": [
        {
          "start_line": 10,
          "end_line": 10,
          "text": "// TP_PROTO(struct request *rq, blk_status_t error, unsigned int nr_bytes)"
        }
      ],
      "updateMaps": [],
      "readMaps": [],
      "input": [
        "block_rq_complete"
      ],
      "output": "NA",
      "helper": [
        "bpf_ktime_get_ns"
      ],
      "compatibleHookpoints": [
        "socket_filter",
        "sched_cls",
        "cgroup_sock",
        "cgroup_sock_addr",
        "lwt_out",
        "sk_skb",
        "perf_event",
        "lwt_in",
        "sched_act",
        "xdp",
        "lwt_xmit",
        "sock_ops",
        "tracepoint",
        "kprobe",
        "sk_msg",
        "cgroup_skb",
        "raw_tracepoint_writable",
        "lwt_seg6local",
        "flow_dissector",
        "raw_tracepoint",
        "sk_reuseport"
      ],
      "source": [
        "RAW_TRACEPOINT_PROBE (block_rq_complete)\n",
        "{\n",
        "    struct request *rq = (void *) ctx->args[0];\n",
        "    unsigned int cmd_flags;\n",
        "    u64 dur;\n",
        "    size_t base, slot;\n",
        "    if (!rq->io_start_time_ns)\n",
        "        return 0;\n",
        "    dur = bpf_ktime_get_ns () - rq->io_start_time_ns;\n",
        "    slot = min_t (size_t, div_u64 (dur, 100 * NSEC_PER_MSEC), 99);\n",
        "    lat_100ms.increment (slot);\n",
        "    if (slot)\n",
        "        return 0;\n",
        "    slot = min_t (size_t, div_u64 (dur, NSEC_PER_MSEC), 99);\n",
        "    lat_1ms.increment (slot);\n",
        "    if (slot)\n",
        "        return 0;\n",
        "    slot = min_t (size_t, div_u64 (dur, 10 * NSEC_PER_USEC), 99);\n",
        "    lat_10us.increment (slot);\n",
        "    return 0;\n",
        "}\n"
      ],
      "called_function_list": [],
      "call_depth": 0,
      "humanFuncDescription": [
        {},
        {
          "description": "biolatpcts_RAW_TRACEPOINT_PROBE function takes as input a block_req_complete\n                      and calculates the duration of the i/o time 'dur' by subtracting kernel time \n                      with start time. It uses helper bpf_ktime_get_ns() to get the kernel time. It \n                      then divides it into three slots:\n                      dur>100ms, 100ms>dur>1ms and 10microsec<dur<1ms and increments the count of each \n                      slot if the duration falls in the slot. biolatpcts_RAW_TRACEPOINT_PROBE returns 0\n                      when the slots are valid or the io start time for request is 0.",
          "author": "Neha Chowdhary",
          "authorEmail": "nehaniket79@gmail.com",
          "date": "01.02.2023"
        }
      ],
      "AI_func_description": [
        {
          "description": "",
          "author": "",
          "authorEmail": "",
          "date": "",
          "invocationParameters": ""
        }
      ],
      "is_root_fn": 1
    }
  }
}
